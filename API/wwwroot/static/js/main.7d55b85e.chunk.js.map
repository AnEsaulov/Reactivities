{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","go","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","userName","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","loadingActivities","userActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","GridColumn","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Column","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","valus","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","navigate","useNavigate","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","Statistic","Divider","location","useLocation","finally","hideProgressBar","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.7d55b85e.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers = {Authorization: `Bearer ${token}`}; //config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n        if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n        const pagination = response.headers['pagination'];\r\n        if (pagination) {\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n            return response as AxiosResponse<PaginatedResult<any>>;\r\n        }\r\n        return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n                history.push('/not-found');\r\n                history.go(-1);\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } \r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            history.push('/not-found');\r\n            history.go(-1);\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            history.push('/server-error');\r\n            history.go(-1);\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUserName: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n            \r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user=store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.userName\r\n            )\r\n            activity.isHost = activity.hostUserName === user.userName;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUserName);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);        \r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.userName);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    loadingActivities =  false;\r\n    userActivities: UserActivity[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }  \r\n    \r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.userName && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username !== store.userStore.user?.userName) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false);            \r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    \r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal =  () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer( function NavBar() {\r\n    const {userStore: {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}> \r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}                    \r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}                    \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.userName === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n    \r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Card as={Link} to={`/profile/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}> \r\n                            <Image \r\n                                size='mini' \r\n                                circular \r\n                                src={attendee.image || '/assets/user.png'} \r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item> \r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n               \r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 5}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUserName}`}>{activity.host?.displayName}</Link> </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}                            \r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, GridColumn, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n  \r\n        \r\n    return (\r\n        <Grid>\r\n            <GridColumn width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </GridColumn>\r\n            <GridColumn width='6'>\r\n                <ActivityFilters />\r\n            </GridColumn>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { Formik, Form, ErrorMessage} from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik \r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' \r\n                        render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n           {errors && (\r\n               <Message.List>\r\n                   {errors.map((err: any, i: any) => (\r\n                       <Message.Item key={i}>{err}</Message.Item>\r\n                   ))}\r\n               </Message.List>\r\n           )} \r\n        </Message>\r\n    )\r\n}","import { Formik, Form, ErrorMessage} from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik \r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required()\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' \r\n                        render={() => \r\n                            <ValidationErrors errors={errors.error} />\r\n                        }\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer( function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>                    \r\n                    </>\r\n\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n   inverted?: boolean;\r\n   content?: string; \r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                valus={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\nexport default observer(function ActivityForm() {\r\n    const navigate = useNavigate();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => navigate(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => navigate(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' \r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.displayName}`}>{activity.host?.displayName}</Link></strong>\r\n                                \r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate activity' : 'Cancel activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link} \r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>                    \r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled} \r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n  const {activityStore} = useStore();\r\n  const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n  const {id} = useParams<{id: string}>();\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id);\r\n    return () => clearSelectedActivity();\r\n  }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n  if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          <ActivityDetailedHeader activity={activity} />\r\n          <ActivityDetailedInfo activity={activity} />\r\n          <ActivityDetailedChat activityId={activity.id} />\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <ActivityDetailedSidebar activity={activity} />\r\n        </Grid.Column>\r\n      </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n  const dzStyles = {\r\n      border: 'dashed 3px #eee',\r\n      borderColor: '#eee',\r\n      borderRadius: '5px',\r\n      paddingTop: '30px',\r\n      textAlign: 'center' as 'center',\r\n      height: 200\r\n  }\r\n\r\n  const dzActive ={\r\n      borderColor: 'green'\r\n  }\r\n  \r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge' />\r\n        <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);   \r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n            </Grid.Column>                        \r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const {profileStore: { isCurrentUser, uploadPhoto, \r\n            uploading, loading, setMainPhoto, deletePhoto }} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }    \r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic \r\n                            content={addPhotoMode? 'Cancel' : 'Add Photo'} \r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                                basic \r\n                                                color='red' \r\n                                                icon='trash' \r\n                                                name={photo.id}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                                ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n\r\n    return (\r\n            <Formik\r\n                initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n                onSubmit={values =>\r\n                    updateProfile(values).then(() => {setEditMode(false);})\r\n                }\r\n                validationSchema={Yup.object({displayName: Yup.string().required()})}\r\n            >\r\n                {({ handleSubmit, isSubmitting, isValid, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit}>\r\n                        <MyTextInput placeholder='Display Name' name='displayName' />\r\n                        <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                        <Button\r\n                            positive\r\n                            type='submit'\r\n                            loading={isSubmitting}\r\n                            content='Update profile'\r\n                            floated='right'\r\n                            disabled={!isValid || !dirty}\r\n                        />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        \r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.username} is following`} \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header, Tab, Image, TabProps } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    {menuItem: 'Future Events', pane: { key: 'future' } },\r\n    {menuItem: 'Past Events', pane: { key: 'past' } },\r\n    {menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n]\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const {profileStore} = useStore();\r\n    const {loadUserActivities, profile, loadingActivities, userActivities} = profileStore;   \r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='calendar' \r\n                        content={'Activities'}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab \r\n                        menu={{ secondary: true, pointing: true }} \r\n                        panes={panes} \r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card key={activity.id} as={Link} to={`/activities/${activity.id}`}>\r\n                                <Image \r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`} \r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n    \r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n    ]\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group width={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username!);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />                \r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Routes, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport LoginForm from '../../features/users/LoginForm';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app ...' />\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <NavBar />\r\n      <Container style={{marginTop: '7em'}}> \r\n        <Routes>\r\n          <Route path='/' element={<HomePage />} />\r\n          <Route path='/activities' element={<ActivityDashboard />} />\r\n          <Route path='/activities/:id' element={<ActivityDetails />} />\r\n          <Route key={location.key} path='/createActivity' element={<ActivityForm />} />\r\n          <Route key={location.key} path='/manage/:id' element={<ActivityForm />} />\r\n          <Route path='/profiles/:username' element={<ProfilePage />} />\r\n          <Route path='/errors' element={<TestErrors />} />\r\n          <Route path='/server-error' element={<ServerError />} />\r\n          <Route path='/login' element={<LoginForm />} />\r\n          <Route path='*' element={<NotFound />} />\r\n        </Routes>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/style.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport {createBrowserHistory} from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <BrowserRouter>\r\n      <ScrollToTop />\r\n      <App />\r\n    </BrowserRouter>\r\n    \r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}